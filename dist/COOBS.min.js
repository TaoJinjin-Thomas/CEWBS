!function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a="function"==typeof require&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(require,module){var meshers={greedy:require("./meshers/greedy_tri.js").mesher,monotone:require("./meshers/monotone.js").mesher},COOBS=window.COOBS={};COOBS.VoxelMesh=function(name,scene){BABYLON.Mesh.call(this,name,scene)},COOBS.VoxelMesh.prototype=Object.create(BABYLON.Mesh.prototype),COOBS.VoxelMesh.prototype.constructor=COOBS.VoxelMesh,COOBS.VoxelMesh.prototype.mesher=meshers.greedy,COOBS.VoxelMesh.prototype.coloringFunction=function(id){return[id/5,id/5,id/5]},COOBS.VoxelMesh.prototype.setMesher=function(type){if("greedy"==type)this.mesher=meshers.greedy;else{if("monotone"!=type)return'Error: type must be either "greedy", or "monotone".';this.mesher=meshers.monotone}},COOBS.VoxelMesh.prototype.setVoxelAt=function(x,y,z,metaData){return null==this.voxelData.voxels?"Error: please set the dimensions of the voxelData first!":void(Array.isArray(x)?this.voxelData.voxels[x[0]+x[1]*this.voxelData.dimensions[0]+x[2]*this.voxelData.dimensions[0]*this.voxelData.dimensions[1]]=y:this.voxelData.voxels[x+y*this.voxelData.dimensions[0]+z*this.voxelData.dimensions[0]*this.voxelData.dimensions[1]]=metaData)},COOBS.VoxelMesh.prototype.setVoxelBatch=function(voxels,metaData){for(var i=0;i<voxels.length;i++){var voxel=voxels[i];voxel.length<4&&null!=metaData?this.setVoxelAt(voxel,metaData):this.setVoxelAt(voxel,voxel[3])}},COOBS.VoxelMesh.prototype.getVoxelAt=function(x,y,z){return null!=this.voxelData.voxels?this.voxelData.voxels[x+y*this.voxelData.dimensions[0]+z*this.voxelData.dimensions[0]*this.voxelData.dimensions[1]]:"Error: please set the dimensions of the voxelData first!"},COOBS.VoxelMesh.prototype.setVoxelData=function(voxelData){this.voxelData=voxelData},COOBS.VoxelMesh.prototype.getVoxelData=function(){return this.voxelData},COOBS.VoxelMesh.prototype.setDimensions=function(dims){return Array.isArray(dims)&&3==dims.length?(null==this.voxelData&&(this.voxelData={}),this.voxelData.dimensions=dims,null==this.voxelData.voxels&&(this.voxelData.voxels=new Array(dims[0]*dims[1]*dims[2])),void 0):"Error: dimensions must be an array [x,y,z]"},COOBS.VoxelMesh.prototype.updateMesh=function(){var rawMesh=this.mesher(this.voxelData.voxels,this.voxelData.dimensions),positions=[],indices=[],colors=[],normals=[];rawMesh.vertices.length<1&&(this.isPickable=!1);for(var i=0;i<rawMesh.vertices.length;++i){var q=rawMesh.vertices[i];positions.push(q[0],q[1],q[2])}for(var i=0;i<rawMesh.faces.length;++i){var q=rawMesh.faces[i];indices.push(q[2],q[1],q[0]);for(var i2=0;3>i2;i2++){var color=this.coloringFunction(q[3]);null!=color?(colors[3*q[i2]]=color[0]/255,colors[3*q[i2]+1]=color[1]/255,colors[3*q[i2]+2]=color[2]/255):(colors[3*q[i2]]=1.5,colors[3*q[i2]+1]=.3,colors[3*q[i2]+2]=1.5)}}BABYLON.VertexData.ComputeNormals(positions,indices,normals);var vertexData=new BABYLON.VertexData;vertexData.positions=positions,vertexData.indices=indices,vertexData.normals=normals,vertexData.colors=colors,vertexData.applyToMesh(this,1),this._updateBoundingInfo()},COOBS.VoxelMesh.prototype.originToCenterOfBounds=function(ignoreY){var pivotX=-this.voxelData.dimensions[0]/2,pivotY=-this.voxelData.dimensions[1]/2,pivotZ=-this.voxelData.dimensions[2]/2;ignoreY&&(pivotY=0),this.setPivot(pivotX,pivotY,pivotZ)},COOBS.VoxelMesh.prototype.setPivot=function(pivotX,pivotY,pivotZ){var pivot=BABYLON.Matrix.Translation(pivotX,pivotY,pivotZ);this.setPivotMatrix(pivot)},COOBS.VoxelMesh.prototype.exportVoxelData=function(){for(var convertedVoxels=[],i=0;i<this.voxelData.voxels.length;i++){var voxel=this.voxelData.voxels[i];if(null!=voxel){var x=i%this.voxelData.dimensions[0],y=Math.floor(i/this.voxelData.dimensions[0]%this.voxelData.dimensions[1]),z=Math.floor(i/(this.voxelData.dimensions[1]*this.voxelData.dimensions[0]));convertedVoxels.push([x,y,z,voxel])}}return{dimensions:this.voxelData.dimensions,voxels:convertedVoxels}},COOBS.VoxelMesh.handlePick=function(pickResult){var mesh=pickResult.pickedMesh,point=pickResult.pickedPoint,m=new BABYLON.Matrix;mesh.getWorldMatrix().invertToRef(m);var x,y,z,voxel1,voxel2,v=BABYLON.Vector3.TransformCoordinates(point,m),offsetX=+(v.x-v.x.toFixed(0)).toFixed(4),offsetY=+(v.y-v.y.toFixed(0)).toFixed(4),offsetZ=+(v.z-v.z.toFixed(0)).toFixed(4);return 0==offsetX?(x=Math.round(v.x),y=Math.floor(v.y),z=Math.floor(v.z),x>=mesh.voxelData.dimensions[0]&&(x=mesh.voxelData.dimensions[0]-1),voxel1=[x,y,z],voxel2=[x-1,y,z]):0==offsetY?(x=Math.floor(v.x),y=Math.round(v.y),z=Math.floor(v.z),y>=mesh.voxelData.dimensions[1]&&(y=mesh.voxelData.dimensions[1]-1),voxel1=[x,y,z],voxel2=[x,y-1,z]):0==offsetZ&&(x=Math.floor(v.x),y=Math.floor(v.y),z=Math.round(v.z),z>=mesh.voxelData.dimensions[2]&&(z=mesh.voxelData.dimensions[2]-1),voxel1=[x,y,z],voxel2=[x,y,z-1]),mesh.getVoxelAt(voxel1[0],voxel1[1],voxel1[2])?(pickResult.over=voxel2,pickResult.under=voxel1,pickResult):(pickResult.over=voxel1,pickResult.under=voxel2,pickResult)},window.COOBS||(module.exports=COOBS)},{"./meshers/greedy_tri.js":2,"./meshers/monotone.js":3}],2:[function(require,module,exports){var GreedyMesh=function(){var mask=new Int32Array(4096);return function(volume,dims){function f(i,j,k){return volume[i+dims[0]*(j+dims[1]*k)]}for(var vertices=[],faces=[],d=0;3>d;++d){var i,j,k,l,w,h,u=(d+1)%3,v=(d+2)%3,x=[0,0,0],q=[0,0,0];for(mask.length<dims[u]*dims[v]&&(mask=new Int32Array(dims[u]*dims[v])),q[d]=1,x[d]=-1;x[d]<dims[d];){var n=0;for(x[v]=0;x[v]<dims[v];++x[v])for(x[u]=0;x[u]<dims[u];++x[u],++n){var a=0<=x[d]?f(x[0],x[1],x[2]):0,b=x[d]<dims[d]-1?f(x[0]+q[0],x[1]+q[1],x[2]+q[2]):0;mask[n]=!!a==!!b?0:a?a:-b}for(++x[d],n=0,j=0;j<dims[v];++j)for(i=0;i<dims[u];){var c=mask[n];if(c){for(w=1;c===mask[n+w]&&i+w<dims[u];++w);var done=!1;for(h=1;j+h<dims[v];++h){for(k=0;w>k;++k)if(c!==mask[n+k+h*dims[u]]){done=!0;break}if(done)break}x[u]=i,x[v]=j;var du=[0,0,0],dv=[0,0,0];c>0?(dv[v]=h,du[u]=w):(c=-c,du[v]=h,dv[u]=w);var vertex_count=vertices.length;for(vertices.push([x[0],x[1],x[2]]),vertices.push([x[0]+du[0],x[1]+du[1],x[2]+du[2]]),vertices.push([x[0]+du[0]+dv[0],x[1]+du[1]+dv[1],x[2]+du[2]+dv[2]]),vertices.push([x[0]+dv[0],x[1]+dv[1],x[2]+dv[2]]),faces.push([vertex_count,vertex_count+1,vertex_count+2,c]),faces.push([vertex_count,vertex_count+2,vertex_count+3,c]),l=0;h>l;++l)for(k=0;w>k;++k)mask[n+k+l*dims[u]]=0;i+=w,n+=w}else++i,++n}}}return{vertices:vertices,faces:faces}}}();exports&&(exports.mesher=GreedyMesh)},{}],3:[function(require,module,exports){"use strict";var MonotoneMesh=function(){function MonotonePolygon(c,v,ul,ur){this.color=c,this.left=[[ul,v]],this.right=[[ur,v]]}return MonotonePolygon.prototype.close_off=function(v){this.left.push([this.left[this.left.length-1][0],v]),this.right.push([this.right[this.right.length-1][0],v])},MonotonePolygon.prototype.merge_run=function(v,u_l,u_r){var l=this.left[this.left.length-1][0],r=this.right[this.right.length-1][0];l!==u_l&&(this.left.push([l,v]),this.left.push([u_l,v])),r!==u_r&&(this.right.push([r,v]),this.right.push([u_r,v]))},function(volume,dims){function f(i,j,k){return volume[i+dims[0]*(j+dims[1]*k)]}for(var vertices=[],faces=[],d=0;3>d;++d){var i,j,k,u=(d+1)%3,v=(d+2)%3,x=new Int32Array(3),q=new Int32Array(3),runs=new Int32Array(2*(dims[u]+1)),frontier=new Int32Array(dims[u]),next_frontier=new Int32Array(dims[u]),left_index=new Int32Array(2*dims[v]),right_index=new Int32Array(2*dims[v]),stack=new Int32Array(24*dims[v]),delta=[[0,0],[0,0]];for(q[d]=1,x[d]=-1;x[d]<dims[d];){var polygons=[],nf=0;for(x[v]=0;x[v]<dims[v];++x[v]){var nr=0,p=0,c=0;for(x[u]=0;x[u]<dims[u];++x[u],p=c){var a=0<=x[d]?f(x[0],x[1],x[2]):0,b=x[d]<dims[d]-1?f(x[0]+q[0],x[1]+q[1],x[2]+q[2]):0;c=a,!a==!b?c=0:a||(c=-b),p!==c&&(runs[nr++]=x[u],runs[nr++]=c)}runs[nr++]=dims[u],runs[nr++]=0;for(var fp=0,i=0,j=0;nf>i&&nr-2>j;){var p=polygons[frontier[i]],p_l=p.left[p.left.length-1][0],p_r=p.right[p.right.length-1][0],p_c=p.color,r_l=runs[j],r_r=runs[j+2],r_c=runs[j+1];if(r_r>p_l&&p_r>r_l&&r_c===p_c)p.merge_run(x[v],r_l,r_r),next_frontier[fp++]=frontier[i],++i,j+=2;else{if(p_r>=r_r){if(r_c){var n_poly=new MonotonePolygon(r_c,x[v],r_l,r_r);next_frontier[fp++]=polygons.length,polygons.push(n_poly)}j+=2}r_r>=p_r&&(p.close_off(x[v]),++i)}}for(;nf>i;++i)polygons[frontier[i]].close_off(x[v]);for(;nr-2>j;j+=2){var r_l=runs[j],r_r=runs[j+2],r_c=runs[j+1];if(r_c){var n_poly=new MonotonePolygon(r_c,x[v],r_l,r_r);next_frontier[fp++]=polygons.length,polygons.push(n_poly)}}var tmp=next_frontier;next_frontier=frontier,frontier=tmp,nf=fp}for(var i=0;nf>i;++i){var p=polygons[frontier[i]];p.close_off(dims[v])}x[d]++;for(var i=0;i<polygons.length;++i){var p=polygons[i],c=p.color,flipped=!1;0>c&&(flipped=!0,c=-c);for(var j=0;j<p.left.length;++j){left_index[j]=vertices.length;var y=[0,0,0],z=p.left[j];y[d]=x[d],y[u]=z[0],y[v]=z[1],vertices.push(y)}for(var j=0;j<p.right.length;++j){right_index[j]=vertices.length;var y=[0,0,0],z=p.right[j];y[d]=x[d],y[u]=z[0],y[v]=z[1],vertices.push(y)}var bottom=0,top=0,l_i=1,r_i=1,side=!0;for(stack[top++]=left_index[0],stack[top++]=p.left[0][0],stack[top++]=p.left[0][1],stack[top++]=right_index[0],stack[top++]=p.right[0][0],stack[top++]=p.right[0][1];l_i<p.left.length||r_i<p.right.length;){var n_side=!1;if(l_i===p.left.length)n_side=!0;else if(r_i!==p.right.length){var l=p.left[l_i],r=p.right[r_i];n_side=l[1]>r[1]}var idx=n_side?right_index[r_i]:left_index[l_i],vert=n_side?p.right[r_i]:p.left[l_i];if(n_side!==side)for(;top>bottom+3;)faces.push(flipped===n_side?[stack[bottom],stack[bottom+3],idx,c]:[stack[bottom+3],stack[bottom],idx,c]),bottom+=3;else for(;top>bottom+3;){for(var j=0;2>j;++j)for(var k=0;2>k;++k)delta[j][k]=stack[top-3*(j+1)+k+1]-vert[k];var det=delta[0][0]*delta[1][1]-delta[1][0]*delta[0][1];if(n_side===det>0)break;0!==det&&faces.push(flipped===n_side?[stack[top-3],stack[top-6],idx,c]:[stack[top-6],stack[top-3],idx,c]),top-=3}stack[top++]=idx,stack[top++]=vert[0],stack[top++]=vert[1],n_side?++r_i:++l_i,side=n_side}}}}return{vertices:vertices,faces:faces}}}();exports&&(exports.mesher=MonotoneMesh)},{}]},{},[1]);